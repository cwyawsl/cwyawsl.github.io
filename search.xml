<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用Python脚本实现vim明暗主题自动切换</title>
      <link href="/2021/10/02/%E5%88%A9%E7%94%A8Python%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0vim%E6%98%8E%E6%9A%97%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2/"/>
      <url>/2021/10/02/%E5%88%A9%E7%94%A8Python%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0vim%E6%98%8E%E6%9A%97%E4%B8%BB%E9%A2%98%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="利用Python脚本实现neovim的明暗主题自动切换"><a href="#利用Python脚本实现neovim的明暗主题自动切换" class="headerlink" title="利用Python脚本实现neovim的明暗主题自动切换"></a>利用Python脚本实现neovim的明暗主题自动切换</h1><p>快开通你的小脑筋QwQ，跟我一起来！</p><h2 id="开头～～"><a href="#开头～～" class="headerlink" title="开头～～"></a>开头～～</h2><p>朋友，你是否和我一样，是个忠实的vim狂热粉，却苦于黑天白夜的敲代码，而感到双眼酸疼，那么没问题！<del>今天，我就给您带来我们公司的最新产品 —- nvim主题自动切换器</del></p><p>其实就是个大佬们都看不上的垃圾脚本（</p><h3 id="正文～～"><a href="#正文～～" class="headerlink" title="正文～～"></a>正文～～</h3><p>先贴上代码：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>! Auto_change_themes()</span><br><span class="line">py &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">import vim</span><br><span class="line">import os</span><br><span class="line">import pytz</span><br><span class="line">import datetime</span><br><span class="line">from dateutil.tz import tzlocal</span><br><span class="line">from suntime import Sun</span><br><span class="line">import requests as req</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">ret = req.get(</span><br><span class="line">        url = <span class="symbol">&#x27;https</span>://apis.<span class="keyword">map</span>.qq.com/ws/location/v1/ip&#x27;,</span><br><span class="line">        params=&#123;</span><br><span class="line">            <span class="symbol">&#x27;key</span>&#x27;: <span class="symbol">&#x27;your</span> key&#x27; #此处更换为你自己的密钥</span><br><span class="line">            &#125;</span><br><span class="line">        ).json()</span><br><span class="line"></span><br><span class="line">home = os.environ[<span class="symbol">&#x27;HOME</span>&#x27;]</span><br><span class="line">config_dir = &#x27;/.config/nvim/location.npy&#x27;</span><br><span class="line">file_path = home + config_dir</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">read_location = np.load(file_path,allow_pickle=<span class="literal">True</span>).item()</span><br><span class="line">latitude = read_location.get(<span class="symbol">&#x27;result</span>&#x27;).get(<span class="symbol">&#x27;location</span>&#x27;).get(<span class="symbol">&#x27;lat</span>&#x27;)</span><br><span class="line">longtitude = read_location.get(<span class="symbol">&#x27;result</span>&#x27;).get(<span class="symbol">&#x27;location</span>&#x27;).get(<span class="symbol">&#x27;lng</span>&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">np.save(file_path,ret)</span><br><span class="line">read_location = np.load(file_path,allow_pickle=<span class="literal">True</span>).item()</span><br><span class="line">latitude = read_location.get(<span class="symbol">&#x27;result</span>&#x27;).get(<span class="symbol">&#x27;location</span>&#x27;).get(<span class="symbol">&#x27;lat</span>&#x27;)</span><br><span class="line">longtitude = read_location.get(<span class="symbol">&#x27;result</span>&#x27;).get(<span class="symbol">&#x27;location</span>&#x27;).get(<span class="symbol">&#x27;lng</span>&#x27;)</span><br><span class="line"></span><br><span class="line">#latitude = <span class="number">26.153224357107746</span></span><br><span class="line">#longitude = <span class="number">118.16177778433492</span></span><br><span class="line"></span><br><span class="line">today = datetime.datetime.today()</span><br><span class="line">year = today.year</span><br><span class="line">month = today.month</span><br><span class="line">day = today.day</span><br><span class="line">sun = Sun(latitude,longtitude)</span><br><span class="line"></span><br><span class="line">abd = datetime.date(year, month, day)</span><br><span class="line">abd_sr = sun.get_local_sunrise_time(abd)</span><br><span class="line">abd_ss = sun.get_local_sunset_time(abd)</span><br><span class="line"></span><br><span class="line">now=datetime.datetime.now()</span><br><span class="line">now=now.replace(tzinfo=tzlocal())</span><br><span class="line">now_for_sunrise = now + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> now_for_sunrise &gt; abd_sr <span class="keyword">and</span> now &lt; abd_ss:</span><br><span class="line">vim.command(<span class="symbol">&#x27;set</span> background=dark&#x27;)</span><br><span class="line">vim.command(<span class="symbol">&#x27;colorscheme</span> deus&#x27;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">vim.command(<span class="symbol">&#x27;set</span> background=dark&#x27;)</span><br><span class="line">vim.command(<span class="symbol">&#x27;colorscheme</span> onedark &#x27;)</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">call Auto_change_themes()</span><br></pre></td></tr></table></figure><p><em><strong>建议建议仔细研读代码后，在进行编写，不要一味地复制粘贴！</strong></em></p><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><h5 id="初版"><a href="#初版" class="headerlink" title="初版"></a>初版</h5><p>最早呢，自从我在网络上搜寻一番后，我在胸中得到了我脚本的最初代码：</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>! Auto_change_themes()</span><br><span class="line">py &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> vim</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">date_early=<span class="number">8</span></span><br><span class="line">date_late=<span class="number">18</span></span><br><span class="line">now= <span class="keyword">int</span>(os<span class="variable">.popen</span>(<span class="number">&#x27;da</span>te | cut -d<span class="string">&quot; &quot;</span> -f5 | cut -d: -f1&#x27;)<span class="variable">.read</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> now &gt; date_early <span class="keyword">and</span> now &lt; date_late:</span><br><span class="line">vim<span class="variable">.command</span>(&#x27;set background=dark&#x27;)</span><br><span class="line">vim<span class="variable">.command</span>(&#x27;colorscheme deus&#x27;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">vim<span class="variable">.command</span>(&#x27;set background=dark&#x27;)</span><br><span class="line">vim<span class="variable">.command</span>(&#x27;colorscheme onedark &#x27;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的”colorscheme”可自由更换为你喜欢的主题</p><p>但是你们也看到了这个其实就是个写死的命令，虽说能实现功能吧，但还是觉得太简陋了，于是就有了升级版。</p><h5 id="升级版"><a href="#升级版" class="headerlink" title="升级版"></a>升级版</h5><p>思路如下：</p><p>为了使每个用户无论处于哪里，只要有良好的互联网连接，就能获得当地的日出日落时间，以准确判定系统主题。</p><p>我在pypi里找到了这样的案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> suntime <span class="keyword">import</span> Sun, SunTimeException</span><br><span class="line"></span><br><span class="line">latitude = <span class="number">51.21</span></span><br><span class="line">longitude = <span class="number">21.01</span></span><br><span class="line"></span><br><span class="line">sun = Sun(latitude, longitude)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get today&#x27;s sunrise and sunset in UTC</span></span><br><span class="line">today_sr = sun.get_sunrise_time()</span><br><span class="line">today_ss = sun.get_sunset_time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Today at Warsaw the sun raised at &#123;&#125; and get down at &#123;&#125; UTC&#x27;</span>.</span><br><span class="line">      <span class="built_in">format</span>(today_sr.strftime(<span class="string">&#x27;%H:%M&#x27;</span>), today_ss.strftime(<span class="string">&#x27;%H:%M&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>利用<strong>datetime</strong>和<strong>suntime</strong>这两个模块，我们就能通过经纬度来判断我们此地的日出以及日落时间，相较于手写时间，灵活了不少。</p><p>但是你应该也注意到了，latitude和longitude这两个值还是需要我们手动填写。那咋办呢，接着造啊！</p><p>于是我又开始了，全网找资料的历程，终于，让我在csdn上找到了这么一篇利用第三方api获取当前经纬度的文章：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"></span><br><span class="line">ret = req.get(</span><br><span class="line">        url = <span class="string">&#x27;https://apis.map.qq.com/ws/location/v1/ip&#x27;</span>,</span><br><span class="line">        params=&#123;</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;your key&#x27;</span> <span class="comment">#此处更换为你自己的密钥</span></span><br><span class="line">            &#125;</span><br><span class="line">        ).json()</span><br></pre></td></tr></table></figure><p>这里利用requests模块获取到了经纬等地理信息的列表文件，我们将它留存起来，以供之后使用。</p><p>看到这里，相信不少小伙伴们觉得：哎呀，这时间也自动了，经纬度也自动了，是不是就万事大吉了呢～～</p><p>非也！我要说的是，上述方案，只能在有网时使用，万一断网，那不是完犊子。所以，我由于又又又对脚本文件进行了更改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">ret = req.get(</span><br><span class="line">        url = <span class="string">&#x27;https://apis.map.qq.com/ws/location/v1/ip&#x27;</span>,</span><br><span class="line">        params=&#123;</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;your key&#x27;</span> <span class="comment">#此处更换为你自己的密钥</span></span><br><span class="line">            &#125;</span><br><span class="line">        ).json()</span><br><span class="line"></span><br><span class="line">home = os.environ[<span class="string">&#x27;HOME&#x27;</span>]</span><br><span class="line">config_dir = <span class="string">&#x27;/.config/nvim/location.npy&#x27;</span></span><br><span class="line">file_path = home + config_dir</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">read_location = np.load(file_path,allow_pickle=<span class="literal">True</span>).item()</span><br><span class="line">latitude = read_location.get(<span class="string">&#x27;result&#x27;</span>).get(<span class="string">&#x27;location&#x27;</span>).get(<span class="string">&#x27;lat&#x27;</span>)</span><br><span class="line">longtitude = read_location.get(<span class="string">&#x27;result&#x27;</span>).get(<span class="string">&#x27;location&#x27;</span>).get(<span class="string">&#x27;lng&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">np.save(file_path,ret)</span><br><span class="line">read_location = np.load(file_path,allow_pickle=<span class="literal">True</span>).item()</span><br><span class="line">latitude = read_location.get(<span class="string">&#x27;result&#x27;</span>).get(<span class="string">&#x27;location&#x27;</span>).get(<span class="string">&#x27;lat&#x27;</span>)</span><br><span class="line">longtitude = read_location.get(<span class="string">&#x27;result&#x27;</span>).get(<span class="string">&#x27;location&#x27;</span>).get(<span class="string">&#x27;lng&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上，只要我们在第一次联网的情况下，get了这个列表数据，将其保存，那么以后只要都去使用这个文件，岂不就是一劳永逸。只要用一个简单的if语句就可以判断文件的有无，并决定是否使用网络资源，读者大大们，<del>你们说妙不妙</del></p><p>算了，不说了，再卖弄就要被制裁了。</p><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><p>剩下的使用时间转换和列表读取，来判断时间的早晚，相信各位大佬们都会了，我就不再赘述 了。小白们也可以自己查资料的对吧，你们都是成年人了，嘿嘿。（其实就是懒狗不想写）</p><p><a href="http://tiebapic.baidu.com/forum/pic/item/bf1ed187c9177f3efaafec6c67cf3bc79e3d560b.jpg"></a></p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>但是呢，这个插件没有想象中的那么好用。怎么说，功能是实现了，但是速度真的是一言难尽。在~/.config/nvim/init.vim里source了这个文件之后，启动时间足足延长了2s,这能忍吗，这忍不了！</p><p>所以追求速度的读者朋友们还是三思而后行！</p><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>文章到这里就结束了，说了这么多废话，还请各位多多包涵。</p><p>特别感谢以下博主给我提供的帮助：</p><p>csdn简说Python：<a href="https://blog.csdn.net/qq_39241986/article/details/109192934">https://blog.csdn.net/qq_39241986/article/details/109192934</a></p><p>知乎Yggdroot：<a href="https://zhuanlan.zhihu.com/p/89243293">https://zhuanlan.zhihu.com/p/89243293</a></p><ul><li>简说Python大哥为我提供了利用腾讯地图实时定位经纬度的解决方案</li><li>而Yggdroot教会了我，如何利用Python编写vim插件</li></ul><p>值得一提的是，Yggdroot用Python写了诸如Leader的优良插件，很值得大家学习！</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Arch Linux构建内核模块时报报模块缺失的警告</title>
      <link href="/2021/08/22/%E8%A7%A3%E5%86%B3Arch-Linux%E6%9E%84%E5%BB%BA%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%97%B6%E6%8A%A5%E6%8A%A5%E6%A8%A1%E5%9D%97%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%AD%A6%E5%91%8A/"/>
      <url>/2021/08/22/%E8%A7%A3%E5%86%B3Arch-Linux%E6%9E%84%E5%BB%BA%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%97%B6%E6%8A%A5%E6%8A%A5%E6%A8%A1%E5%9D%97%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%AD%A6%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="解决Arch-Linux构建内核模块时报报模块缺失的警告"><a href="#解决Arch-Linux构建内核模块时报报模块缺失的警告" class="headerlink" title="解决Arch Linux构建内核模块时报报模块缺失的警告"></a>解决Arch Linux构建内核模块时报报模块缺失的警告</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这是来自我的B站<a href="https://www.bilibili.com/video/BV1M54y1m7J2/">视频</a>的文字教程，因为硬件设备有限，所以当时视频的制作水平也不是很高，所以，如果你能容忍我的啰嗦的话，那么请接着往下看吧。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><p>朋友，你是否和我一样是个Arch狂热粉，又是否和我一样，对计算机系统有着高级的洁癖。每当我怀着激动的心，用颤抖的手，敲下更新的命令，看着一条条成功的文本提示，心中欣喜万分。直到，那三条消息的出现：</p><ul><li>==&gt; WARNING: Possibly missing firmware for module: wd719x</li><li>==&gt; WARNING: Possibly missing firmware for module: aic94xx</li><li>==&gt; WARNING: Possibly missing firmware for module: xhci_pci</li></ul><p>这能忍吗？这忍不了，在极致的计算机美学里怎么能出现这种警告（虽然是很久以来的正常现象的说）。咳咳，但如果你和我一样，有着这样的洁癖的话，接下来，我来带你解决这个问题。</p><span id="more"></span><h2 id="wd719x-amp-amp-aic94xx模块的安装"><a href="#wd719x-amp-amp-aic94xx模块的安装" class="headerlink" title="wd719x &amp;&amp; aic94xx模块的安装"></a>wd719x &amp;&amp; aic94xx模块的安装</h2><p>这两个模块在官方的仓库里是找不到的，但所幸的是arch4edu收录了这两个软件儿包。所以，解决思路也很明确：</p><h3 id="贴加源"><a href="#贴加源" class="headerlink" title="贴加源"></a>贴加源</h3><p>在Arch上，要使用第三方源，需要将他添加到/etc/pacman.conf文件里。</p><p>这里，我们使用清华开源镜像站的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/arch4edu/">arch4edu</a>源，可以到官方去查看使用方法，这里贴出官方教程</p><p><img src="https://s3.bmp.ovh/imgs/2021/08/f237a5086cdda88f.png"></p><p>但是呢，在本人使用过程中，官方的推荐方法是无法正常使用的，会给出无法正确从远端取回密钥的报错，所以，我们使用它不推荐的方法。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在源添加完成后，我们便可以使用如下的命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy wd719x-firmware aic94xx-firmware</span><br></pre></td></tr></table></figure><p><del>ok,这两个包安装完成之后，我们就成功的给我们的傲娇Arch娘加上了aic94xx与wd719x这两个小玩具</del></p><h2 id="xhci-pci模块安装"><a href="#xhci-pci模块安装" class="headerlink" title="xhci_pci模块安装"></a>xhci_pci模块安装</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>至于这个模块的话，既然我单拎出来讲，那肯定是与其他两个有所不同的。因为不论官方仓库，还是第三方仓库都没有这个软件包。直到我在Arch的论坛上搜索这个警报，才找到了这个内核模块的软件包。</p><p>我们需要使用我们强大的aur来安装。再次之前，你需要一项aur helper，贴加archlinuxcn软件源，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy yay</span><br></pre></td></tr></table></figure><p>接着，我们就可以使用yay这个工具来打上这个模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S upd72020x-fw</span><br></pre></td></tr></table></figure><p>如果遇到提示一路回车安装即可。</p><p>但是你很有可能会由于网络问题出现无法下载的问题，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt; 错误： 无法下载 https://raw.githubusercontent.com/denisandroid/uPD72020x-Firmware/master/UPDATE.mem</span><br><span class="line">==&gt; 错误： 无法下载 https://raw.githubusercontent.com/denisandroid/uPD72020x-Firmware/master/License.rtf</span><br></pre></td></tr></table></figure><p>从提示来看，就是由于网络的问题，无法get到这份文件，那既然无法直接下载，那我们就先git下载，在把文件<del>投喂</del>给yay不就好了</p><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/denisandroid/uPD72020x-Firmware ~/Desktop/firmware</span><br><span class="line">cp ~/Desktop/firmware/UPDATE.mem ~/.cache/yay/upd72020x-fw</span><br><span class="line">cp ~/Desktop/firmware/License.rtf ~/.cache/yay/upd72020x-fw</span><br></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>这里其实也是使用系统过程中的一个小思路，其他aur软件包的下载问题其实都可以尝试用这个思路解决。</p><p>然后重新执行安装命令，就可以成功安装了，好耶！</p><p>接着静待她重新生成内核模块，便不见了之前的警报，是不是超级赞。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章到这里就结束了，字数不多，但是自己的经历总结。如果你没有这些固件的话，其实这些模块的安装是非必要的，仅仅是为了自己舒服。</p><p>笔者乃高中狗一枚，所以精力和学识都有限，请各位多多包涵。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fcitx5强势来袭，快来看看新一代Linux输入法框架</title>
      <link href="/2021/08/13/fcitx5%E5%BC%BA%E5%8A%BF%E6%9D%A5%E8%A2%AD%EF%BC%8C%E5%BF%AB%E6%9D%A5%E7%9C%8B%E7%9C%8B%E6%96%B0%E4%B8%80%E4%BB%A3Linux%E8%BE%93%E5%85%A5%E6%B3%95%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/08/13/fcitx5%E5%BC%BA%E5%8A%BF%E6%9D%A5%E8%A2%AD%EF%BC%8C%E5%BF%AB%E6%9D%A5%E7%9C%8B%E7%9C%8B%E6%96%B0%E4%B8%80%E4%BB%A3Linux%E8%BE%93%E5%85%A5%E6%B3%95%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="fcitx5强势来袭，快来看看新一代Linux输入法框架"><a href="#fcitx5强势来袭，快来看看新一代Linux输入法框架" class="headerlink" title="fcitx5强势来袭，快来看看新一代Linux输入法框架"></a>fcitx5强势来袭，快来看看新一代Linux输入法框架</h1><p>哈，你还在用fcitx?</p><h2 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h2><p>其实早在2015年，<a href="https://github.com/csslayer">csslayer</a> 就开始开发<a href="https://github.com/fcitx/fcitx5">fcitx5</a>了 。直到今天，fcitx5不出意料地成为一个超越历代框架的强大引擎。</p><p>确实，我不否认fcitx的稳定性和可拓展性。但是，社会总是在进步的嘛，还是要多尝试新鲜事物。</p><p>据我个人的测评，fcitx5的使用体验是的的确确由于旧fcitx的。鄙人观点主要有以下几点:</p><span id="more"></span><ul><li><p>fcitx5的图形框架更加的先进(比如说，fcitx5支持Wayland)</p></li><li><p>fcitx5更加的统一。也许，fcitx下支持的输入法很少，或者说根本没有，但是这也带来的他的同一。不想fcitx下那样群雄逐鹿，十分的混乱，也造成了多方面的不兼容，如搜狗。</p></li><li><p>fcitx5的启动速度更加的快速（个人实测），加了词库，但是启动速度依旧比搜狗快很多。</p></li><li><p>可配置性高，可以自己详细看看fcitx5的配置窗口，选项繁多，令人眼花缭乱。</p></li></ul><p>那么，废话就说到这里吧。总的来说就是，fcitx5很香，赶紧试试！！！你还在犹豫什么，快放下手中的fcitx！！！</p><p><em><strong>多图警告，请注意流量</strong></em></p><h2 id="官方文案"><a href="#官方文案" class="headerlink" title="官方文案"></a>官方文案</h2><p>可以参阅Arch Wiki的教程，十分详细—–&gt;<a href="https://wiki.archlinux.org/title/Fcitx5">看这里</a></p><p>“Fcitx5 is the successor of Fcitx.”</p><h2 id="安装（普遍）"><a href="#安装（普遍）" class="headerlink" title="安装（普遍）"></a>安装（普遍）</h2><p>本文由于笔者的开发环境是Arch Linux所以的话，就以arch的包管理器为例。</p><p>请确保你的/etc/pacman.conf里配置好了archlinuxcn仓库源</p><h3 id="安装fcitx5本体"><a href="#安装fcitx5本体" class="headerlink" title="安装fcitx5本体"></a>安装fcitx5本体</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5</span><br></pre></td></tr></table></figure><h3 id="安装fcitx5配置工具（重要）"><a href="#安装fcitx5配置工具（重要）" class="headerlink" title="安装fcitx5配置工具（重要）"></a>安装fcitx5配置工具（重要）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-configtool</span><br></pre></td></tr></table></figure><p>其实如果你是个大佬，非要手写配置文件的话，我也能理解。</p><p>但是，我其实觉得是没有必要啊，明明有简单的方法，为什么非要累着自己呢？</p><p>关于配置工具，安装之后你可以从它的desktop文件里启动。如果你和我一样使用kde plasma桌面的话，那么你也可以打开kde的设置中心，找到输入法子菜单，在那里面进行配置。</p><p>除此之外，中文用户还应安装一下几个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-chewing fcitx5-chinese-addons</span><br></pre></td></tr></table></figure><p>以获得中文输入支持。</p><p>如果你使用拼音输入法，那么我同时推荐你安装一些词库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-pinyin-zhwiki fcitx5-pinyin-moegril</span><br></pre></td></tr></table></figure><p>以上是两个大佬分别爬取了维基百科和萌娘百科制作的肥猫百万大词库和萌娘百科词库。（向大佬致敬( •̀ ω •́ )✧）</p><h3 id="图形框架支持"><a href="#图形框架支持" class="headerlink" title="图形框架支持"></a>图形框架支持</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-qt fcitx5-gtk</span><br></pre></td></tr></table></figure><p>之前说过了，fcitx5对于图形框架的支持十分的强大而广泛，但是这个功能是基于以上这两个包的。</p><h2 id="安装（rime"><a href="#安装（rime" class="headerlink" title="安装（rime)"></a>安装（rime)</h2><p>这个部分主要针对的是使用rime输入法的用户，如你们所见，fcitx5也十分贴心地集成了rime输入法。由于笔者没有使用过rime，所以具体操作可能不是很到位，请各位多多提出意见。</p><p>查阅了一番资料，发现，如果你使用rime的话，只有一部分的包不同。大致是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-rime fcitx5-pinyin-zhwiki-rime fcitx5-pinyin-moegirl-rime</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h3><p>安装一下软件包，以获得最好的ui体验。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-material-color</span><br></pre></td></tr></table></figure><p>这个包的作者为我们的输入提供了类似于Windows10微软输入法的ui体验，可以自行更换fcitx5输入面板的颜色主题。</p><p>其实的话，我是比较喜欢默认的主题的，灰灰的，挺简洁。不过，如果你觉得有需要的话，那也可以更换一下主题。</p><p>如下图。（同时，你也可以在这个区域，配置你的字体）</p><p><img src="https://ashloverem.gitee.io/images/image-20201114075713791.png"></p><p><img src="https://ashloverem.gitee.io/images/image-20201114075744771.png"></p><p><img src="https://ashloverem.gitee.io/images/image-20201114075813174.png"></p><h3 id="云拼音"><a href="#云拼音" class="headerlink" title="云拼音"></a>云拼音</h3><p>可以在设置中心中选择打开或关闭云拼音，同时可以设置切换的快捷键以及云拼音出现的位置。云拼音的后端的号，主要有3个，即：百度、谷歌、谷歌中国，国内用户推荐百度哈。</p><p>笔者觉得还是蛮实用的，不一定什么东西都要去下载词库，直接一个云拼音解决,quite easy！！！</p><p>具体配置详见fcitx5配置中心</p><p><img src="https://ashloverem.gitee.io/images/image-20201114080013265.png"></p><p><img src="https://ashloverem.gitee.io/images/image-20201114080037906.png"></p><h3 id="词库"><a href="#词库" class="headerlink" title="词库"></a>词库</h3><p>值得一提的是，fcitx5支持使用搜狗输入法的词库，这就意味着，不用去调节搜狗输入法那些乱七八糟的依赖，你就可以获得搜狗输入法原生原味的强大词库支持，这就是我推荐fcitx5的又一大原因。</p><p>你可以先下载词库，在进行导入，也可以在fcitx5的配置中心内直接在线浏览并一键式导入搜狗词库，十分的方便易用。</p><p>具体操作如下图：</p><p><img src="https://ashloverem.gitee.io/images/image-20201114075023327.png"></p><p><img src="https://ashloverem.gitee.io/images/image-20201114075102281.png"></p><p><img src="https://ashloverem.gitee.io/images/image-20201114075148096.png"></p><p><img src="https://ashloverem.gitee.io/images/image-20201114075315377.png"></p><p>不必多说，相信机智的你看了这些友好的配置条目，打造自己的词库应该是很轻松的</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://ashloverem.gitee.io/images/image-20201114075505560.png"></p><h3 id="lua支持"><a href="#lua支持" class="headerlink" title="lua支持"></a>lua支持</h3><p>补充一下，如果想让你的输入法支持lua语言配置的话，请安装这个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-lua</span><br></pre></td></tr></table></figure><p><em><strong>其实，fcitx5还支持其他语言的配置，请大家自行查找可用的拓展包，这里只列出常见的。</strong></em></p><h3 id="全角半角支持"><a href="#全角半角支持" class="headerlink" title="全角半角支持"></a><strong>全角半角支持</strong></h3><p>作为使用中文这个计算机中的双字节语言的我们来说，这个还是很必要的吧。</p><p>全角和半角fcitx5当然也是支持的，详细的切换快捷键可以在设置中心里修改。</p><p>如图：</p><p><img src="https://ashloverem.gitee.io/images/image-20201114080620869.png"></p><p>大致就说到这里了，因为fcitx5的配置实在是太五花八门，令人眼花缭乱了，所以还请读者大大们多多探索。</p><p>emm，这篇文章就到这里了，那我们下次再见吧</p><p>咕咕…..(老鸽子了)</p><p>最后的最后，想提一句，up的技术水平不高，文章可能会出现各种纰漏，所以还请大佬们多多包涵和指正（鞠躬）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;goodbye everyone&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
